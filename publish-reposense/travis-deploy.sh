#!/bin/sh

. ./publish-reposense/run.sh

TOKEN=$GITHUB_TOKEN
DEPLOY_KEY=$GITHUB_DEPLOY_KEY
REPO_SLUG=$TRAVIS_REPO_SLUG
COMMIT=$TRAVIS_COMMIT
TOKEN_NAME="GITHUB_TOKEN"
DEPLOY_KEY_NAME="GITHUB_DEPLOY_KEY"
ENV_NAME="Travis"
GIT_USERNAME="Deployment Bot (Travis)"
GIT_EMAIL="deploy@travis-ci.org"

# Pushes reposense-report folder generated by RepoSense to gh-pages branch.

set -o errexit # exit with nonzero exit code if any line fails

if [ -z "$TOKEN" ] && [ -z "$DEPLOY_KEY" ]; then
  echo "${TOKEN_NAME} or ${DEPLOY_KEY_NAME} is not set up in ${ENV_NAME}. Skipping deploy."
  exit 0
fi;

mkdir gh-pages-folder
cd gh-pages-folder

git init
git config user.name "${GIT_USERNAME}"
git config user.email "${GIT_EMAIL}"
git config core.sshCommand "ssh -i ~/id_git -F /dev/null"

if [ -z "$TOKEN" ]; then
  echo "$DEPLOY_KEY" | base64 -d > ~/id_git
  chmod 400 ~/id_git
  git remote add upstream "git@github.com:${REPO_SLUG}.git"
else
  git config credential.helper 'store --file=.git/credentials'
  echo "https://${TOKEN}:@github.com" > .git/credentials
  git remote add upstream "https://github.com/${REPO_SLUG}.git"
fi

set -o nounset # exit if variable is unset

# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote.
if git ls-remote --exit-code --heads upstream gh-pages; then
    git fetch --depth=1 upstream gh-pages
    git pull upstream/gh-pages
elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist
    git checkout --orphan gh-pages
else # error occurred
    exit $?
fi

mkdir -p $TARGET_PAGE
mv -v -f ../reposense-report/* $TARGET_PAGE

# Exit if there are no changes to gh-pages files.
if changes=$(git status --porcelain) && [ -z "$changes" ]; then
    echo 'No changes to GitHub Pages files; exiting.'
    exit 0
fi

git add -A .
git commit -m "Rebuild pages at ${COMMIT}"
git push --quiet upstream HEAD:gh-pages
